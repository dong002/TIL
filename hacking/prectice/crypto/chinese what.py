p1 = 1527207470243143973741530105910986024271649986608148657294882537828034327858594844987775446712917007186537829119357070864918869
p2 = 2019864244456120206428956645997068464122219855220655920467990311571156191223237121636244541173449544034684177250532278907347407
p3 = 1801109020443617827324680638861937237596639325730371475055693399143628803572030079812427637295108153858392360647248339418361407
c1 = 232762450308730030838415167305062079887914561751502831059133765333100914083329837666753704309116795944107100966648563183291808
c2 = 869189375217585206857269997483379374418043159436598804873841035147176525138665409890054486560412505207030359232633223629185304
c3 = 1465704473460472286244828683610388110862719231828602162838215555887249333131331510519650513265133531691347657992103108331793683
from Cryptodome.Util.number import long_to_bytes
# #a = 나머지 = c
# N = p1*p2*p3#  각 나누는 수의 곱
# n1 = N/p1
# n2 = N/p2
# n3 = N/p3

# x1, x2, x3 = 0, 0, 0

# for i in range(1, 101):
#     if (i * n1) % p1 == 1:
#         x1 = i
#     if (i * n2) % p2 == 1:
#         x2 = i
#     if (i * n3) % p3 == 1:
#         x3 = i
# #x = N/나누는 수를 곱해 나누는수로 모듈러 연산을 하면 1이 나오는 수
# flag = (c1*n1*x1 + c2*n2*x2 + c3*n3*x3) % N
# print(flag)
x = (c1 * p2 * p3 * pow(p2 * p3, -1, p1) +
     c2 * p1 * p3 * pow(p1 * p3, -1, p2) +
     c3 * p1 * p2 * pow(p1 * p2, -1, p3)) % (p1 * p2 * p3)
d = 3252605711388626316882631631674717103450798162113861327856306348774981010636439640993654302182152291893666887426485817372503250437288712874365
print(long_to_bytes(d))
#("x =", x)
